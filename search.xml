<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[windows程序内部机制]]></title>
    <url>%2F2017%2F07%2F29%2Fwindows%E7%A8%8B%E5%BA%8F%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[windows程序内部运行机制窗口和句柄在Windows应用程序中，窗口是通过窗口句柄（HWND）来标识的。要对一个窗口操作，首先获得该窗口的句柄。同时，系统在创建资源（窗口、图标、光标等）时会分配内存，并且返回标识这些资源的标识号，即句柄。 消息在Windows程序中，消息是由MSG结构体来表示的。其结构定义如下： typedef struct tagMSG { HWND hwnd; //消息所属窗口 UINT message; //消息标识符 WPARAM wParam; //消息附加信息 LPARAM lParam; //消息附加信息 DWORD time; POINT pt; } WinMain函数WinMain函数原型声明如下： int WINAPI WinMain( HINSTANCE hInstance, //当前程序运行实例句柄 HINSTANCE hPrevInstance, //当前实例的前一个实例句柄，一般为NULL LPSTR lpCmdLine, //命令行参数 int nCmdShow ); 一个完整Win32程序过程WinMain函数的定义即把上述的WinMain函数。 创建一个窗口设计一个窗口类类似的，我们在设计一个窗口时，只需要将我们修改的部分填充完整即可，Windows已经为我们定义好了，其中定义的结构体就是WNDCLASS，如下： typedef struct _WNDCLASS { UINT style; //默认为CS_HREDRAW | CS_VREDRAW WNDPROC lpfnWndProc; //指向窗口过程函数 int cbClsExtra; //一般为0 int cbWndExtra; //一般为0 HANDLE hInstance; HICON hIcon; //用LoadIcon()函数，如果选用默认图标，则置为NULL， HCURSOR hCursor; //用LoadCursor()函数 HBRUSH hbrBackground; //使用GetStockObject()函数 LPCTSTR lpszMenuName; LPCTSTR lpszClassName; } WNDCLASS; 注册窗口类注册函数原型声明如下： ATOM RegisterClass(CONST WNDCLASS *lpWndClass); 创建窗口设计好窗口类并且成功注册之后，可以使用CreateWindow()函数产生这种类型的窗口，CreateWindow()函数的原型声明如下： HWND CreateWindow( LPCTSTR lpClassName, //窗口类WNDCLASS的lpszClassName成员指定的名称 LPCTSTR lpWindowName, //标题栏名字 DWORD dwStyle, //一般为WS_OVERLAPPEDWINDOW int x, int y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HANDLE hInstance, LPVOID lpParam ); 显示及更新窗口\1. 显示窗口创建窗口之后，需要用ShowWindow()函数让窗口显示出来，ShowWindow()函数原型声明如下： BOOL ShowWindow( HWND hWnd, int nCmdShow //一般为SW_SHOWNORMAL ); \2. 更新窗口窗口显现出来后，可以紧接着调用UpdateWindow来刷新窗口，原型如下： Bool UpdateWindow( HWND hWnd, ); 消息循环创建，显示，更新完一个窗口后，我们需要编写消息循环，不断地从消息队列中取出消息，此时需要调用GetMessage()函数，原型如下： BOOL GetMessage( LPMSG lpMsg, //消息MSG结构体 HWND hWnd, //一般为NULL,代表调用线程的所有窗口的窗口消息 UINT wMsgFilterMin, //一般为0 UINT wMsgFilterMax //一般为0 ); GetMessage()函数只有在接收到WM_QUIT消息时，才返回0。TranslateMessage()函数用于将虚拟键消息转换为字符消息，可以将WM_KEYDOWN和WM_KEYUP消息组合转化为WM_CHAR消息（该消息的wParam附加参数包含字符的ASCII码），该函数不会修改原有消息，只会产生新的消息并投递倒消息队列中。DispatchMessage()函数分派一个消息到窗口过程，窗口过程函数对消息进行处理。如下图：]]></content>
      <tags>
        <tag>实习</tag>
        <tag>windows编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT1001]]></title>
    <url>%2F2017%2F07%2F23%2FPAT1001%2F</url>
    <content type="text"><![CDATA[PAT1001. A+B Format (20) 题目 代码#include &lt;iostream> #include &lt;iomanip> using namespace std; int a[10]; void formatPrint(long long n){ if(n == 0){ cout &lt;&lt; "0" &lt;&lt; endl; }else if(n &lt; 0){ long long num = -n; int i = 0; while(num != 0){ a[i] = num%1000; num = num/1000; i++; } cout &lt;&lt; "-" ; if(n > -1000){ cout &lt;&lt; a[0] &lt;&lt; endl; }else{ i--; cout &lt;&lt; a[i] &lt;&lt; ","; for(i--; i > 0; i--){ cout &lt;&lt; setfill('0') &lt;&lt; setw(3) &lt;&lt; a[i] &lt;&lt; ","; } cout &lt;&lt; setfill('0') &lt;&lt; setw(3) &lt;&lt; a[0] &lt;&lt; endl; } }else{ long long num = n; int i = 0; while(num != 0){ a[i] = num%1000; num = num/1000; i++; } if(n &lt; 1000){ cout &lt;&lt; a[0] &lt;&lt; endl; }else{ i--; cout &lt;&lt; a[i] &lt;&lt; ","; for(i--; i > 0; i--){ cout &lt;&lt; setfill('0') &lt;&lt; setw(3) &lt;&lt; a[i] &lt;&lt; ","; } cout &lt;&lt; setfill('0') &lt;&lt; setw(3) &lt;&lt; a[0] &lt;&lt; endl; } } } int main(){ long long a, b; cin >> a >> b; formatPrint(a+b); return 0; } 总结这是PAT的第一题，分值只有20分，相对比较简单，需要注意的是格式，以及了解了一下C++中对规范的设置有： &gt;cout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(3) &lt;&lt; a[0] &lt;&lt; endl; 代表宽度为三，不足补零。]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博文]]></title>
    <url>%2F2017%2F07%2F23%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[#第一篇博文 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]@requires_authorization class SomeClass: pass if __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图st=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op 5. 高效绘制 序列图Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks! 6. 高效绘制 甘特图 title 项目开发流程 section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5d section 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5d section 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <tags>
        <tag>one</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>